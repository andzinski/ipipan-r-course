pwd
gewd
getwd
getwd()
library(andzinskihw6)
library(andzinskihw6)
library(andzinskihw6)
library(andzinskihw6)
library(andzinskihw6)
require("knitr")
library(andzinskihw6)
library(andzinskihw6)
library(andzinskihw6)
library(andzinskihw6)
expect_error(mode(c()))
library("testthat")
expect_error(mode(c()))
expect_equal(mode(c(1:1000,111)),111)
expect_equal(mode(rep(1,100)),1)
expect_error(mode(c()))
expect_equal(mode(c(1,1,1,2)),1)
expect_equal(mode(c(1,1,1,2,2,2,2)),2)
expect_equal(mode(c(1:1000,111)),111)
expect_equal(mode(rep(1,100)),1)
(mode(111)
)
mode(111)
expect_equal(mode(111),111)
mode(c(NA))
library(andzinskihw6)
mode(c(NA))
mode(c(NA))
mode(c(NA,NA))
mode(c())
mode(c(1,NA))
mode(c(1,NA,NA))
expect_na(mode(c(NA,NA,NA)))
expect_true(is.na(mode(c(NA,NA,NA))))
help()
help(mode)
library(andzinskihw6)
help(mode)
library(andzinskihw6)
library(andzinskihw6)
simplify2array(1)
simplify2array(c(1)
simplify2array(c(1))
simplify2array(c(1))
simplify2array(c(1,2))
simplify2array(c(1,2),c(1,2))
simplify2array(c(1,2),c(1,3)
)
simplify2array(c(1,2),c(1,3))
simplify2array(list(c(1,2),c(4,5)))
simplify2array(list(c(1,2),c(4,5),c(10,22)))
simplify2array(list(c(1,2),c(4,5),c(10,22,3)))
simplify2array(list(c(1,2),c(4,5),c(10,22)))
simplify2array(list(c(1,2),c(4,5),c(10,22)), higher=true)
simplify2array(higher = true)
simplify2array(higher=true, list(c(1,2),c(4,5),c(10,22)))
simplify2array(higher=TRUE, list(c(1,2),c(4,5),c(10,22)))
simplify2array(higher=TRUE, list(c(1,2,1),c(4,5,1),c(10,22,1)))
simplify2array(higher=FALSE, list(c(1,2,1),c(4,5,1),c(10,22,1)))
sapply(list(c(1,2,1),c(4,5,1),c(10,22,1)))
sapply(list(c(1,2,1),c(4,5,1),c(10,22,1))m simplify="array")
sapply(list(c(1,2,1),c(4,5,1),c(10,22,1)), simplify="array")
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
ass(16)
ass(20)
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
ass(16)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
ass(4)
Rcpp::sourceCpp('src/ass.cpp')
ass(4)
Rcpp::sourceCpp('src/ass.cpp')
ass(4)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
ass(4)
Rcpp::sourceCpp('src/ass.cpp')
ass(4)
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
ass(3)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
ass(1)
ass(3)
ass(4)
ass(5)
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
Rcpp::sourceCpp('src/ass.cpp')
ass(2)
mode(c(1,1,1))
ass(3)
ass(5)
ass(6)
ass(1)
ass(2)
ass(3)
Rcpp::sourceCpp('src/ass.cpp')
library(andzinskihw6)
library(andzinskihw6)
expect_error(mode(c()))
expect_equal(mode(c(1,1,1,2)),1)
expect_equal(mode(c(1,1,1,2,2,2,2)),2)
expect_equal(mode(c(1:1000,111)),111)
expect_equal(mode(rep(1,100)),1)
expect_equal(mode(111),111)
expect_equal(mode(c(1,NA,NA)),1)
expect_true(is.na(mode(c(NA,NA,NA))))
mode(c(1,1,1))
mode(c(1,1,2))
mode(c(1,1,,22))
mode(c(1,1,2,2))
mode(c(1,1,2,2,2))
mode(c(1,1,1,2,2,2))
mode(c(1,1,1,1,2,2,2))
mode(c(1,1,1,1,2,2,2,NA))
mode(c(1,1,1,1,2,2,2,NA,NA))
?ass
?mode
?ass
ass(3)
ass(3)
library(andzinskihw6)
ass(3)
library(andzinskihw6)
ass(3)
ass(2)
ass(100)
Rcpp::sourceCpp('src/ass.cpp')
ass(8)
ass(4)
ass(5)
ass(1000)
ass(64)
ass(60)
ass(24)
library(andzinskihw6)
ass(60)
library(andzinskihw6)
ass(2)
ass(3)
ass(5)
ass(60)
ass(64)
ass(32)
ass(20)
library(andzinskihw6)
ass(4)
ass(5)
ass(6)
nrow(ass(6))
nrow(ass(7))
nrow(ass(8))
nrow(ass(9))
nrow(ass(10))
nrow(ass(11))
nrow(ass(12))
nrow(ass(13))
nrow(ass(14))
Rcpp::sourceCpp('src/ass.cpp')
library(andzinskihw6)
ass
ass(2)
ass(3)
library(andzinskihw6)
ass(3)
ass(2)
library("testthat")
expect_equal(nrows(ass(2)),6)
expect_equal(nrow(ass(2)),6)
expect_equal(nrow(ass(3)),20)
expect_equal(nrow(ass(1)),2)
ass(-1)
expect_error(ass(100))
ass(100)
ass(4)
ass(5)
library("testthat")
expect_equal(nrow(ass(1)),2)
expect_equal(nrow(ass(2)),6)
expect_equal(nrow(ass(3)),20)
expect_equal(nrow(ass(4)),70)
expect_equal(nrow(ass(5)),252)
expect_error(ass(10000))
ass(6)
nrow(ass(6))
expect_equal(nrow(ass(6)),924)
[ass(6)==1]
ass(6)==1
is.true(ass(6)==1)
sum(ass(6)==1)
sum(ass(6)==0)
expect_equal(sum(ass(5)==1),sum(ass(5)==0))
library(andzinskihw6)
\author{Maciej Andzinski}
?mode
base::mode()
base::mode(c(1,1,1))
base::mode(c(1,1,2))
nrow(ass(2))
sapply(c(1:5), function(x) { nrow(ass(x)) })
sapply(c(1:8), function(x) { nrow(ass(x)) })
sapply(c(1:10), function(x) { nrow(ass(x)) })
n <- sapply(c(1:10), function(x) { nrow(ass(x)) })
names(n) <- c(1:10)
n
n
table(n)
as.matrix(n)
m<-as.matrix(n)
m<-colnames("Number of rows")
m
m
m<-as.matrix(n)
colnames(m) <- c("Number of rows")
m
colnames(m) <- c("nrow")
m
exceed 10\^7 rows.
m
plot(m)
n
plot(n)
plot(c(1:2))
plot(n)
plot(m)
size(plot(m))
sizeof(plot(m))
object.size(m)
n <- sapply(c(1:10), function(x) { object.size(ass(x)) })
names(n) <- c(1:10)
as.matrix(n)
sapply(c(1:10), function(x) { object_size(ass(x)) })
object.size(ass(13))
Rcpp::sourceCpp('src/simplify2array.cpp')
Rcpp::sourceCpp('src/simplify2array.cpp')
simplify2array(list(c(1,2),c(4,6)))
Rcpp::sourceCpp('src/simplify2array.cpp')
simplify2array(list(c(1,2),c(4,6)))
base::simplify2array(list(c(1,2),c(4,6)))
base::simplify2array(list(c(1,2),c(4,6,6)))
base::simplify2array(list(c(1,2),c(4,6)))
simplify2array(list(c(1,2),c(4,6,2)))
expect_equal(simplify2array(list(c(1),c(2),c(3)),c(1,2,3))
)
library("testthat")
expect_equal(simplify2array(list(c(1),c(2),c(3)),c(1,2,3)))
expect_equal(simplify2array(list(c(1),c(2),c(3))),c(1,2,3))
matrix(c(1,2,3))
expect_equal(simplify2array(list(c(1,2,3))),matrix(c(1,2,3)))
expect_equal(simplify2array(list(c(1),c(2,3))),list(c(1),c(2,3)))
simplify2array(list(c(FALSE),c(1)))
simplify2array(list(c("a"),c(1)))
base::simplify2array(list(c("a"),c(1)))
expect_equal(simplify2array(list(c(1),c(2),c(3))),base::simplify2array(list(c(1),c(2),c(3))))
expect_equal(simplify2array(list(c(1,2),c(3,4))),base::simplify2array(list(c(1,2),c(3,4))))
expect_equal(simplify2array(list(c(1,2,3,4),c(11,12,13,14))),base::simplify2array(list(c(1,2,3,4),c(11,12,13,14))))
expect_equal(simplify2array(list(c("a"),c(1))),list(c("a"),c(1)))
expect_equal(simplify2array(list(c("a"))),list(c("a")))
expect_equal(simplify2array(list(c(1),FALSE)),c(0,1)))
expect_equal(simplify2array(list(c(1),FALSE)),c(0,1))
expect_equal(simplify2array(list(c(1),c(FALSE))),c(0,1))
simplify2array(list(c(1),c(FALSE)))
base::simplify2array(list(c(1),c(FALSE)))
expect_equal(simplify2array(list(c(1),c(FALSE))),c(1,0))
base::simplify2array
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(andzinskihw6)
microbenchmark::microbenchmark(simplify2array(list(c(1:1000),c(1:1000))), baseLLsimplify2array(list(c(1:1000),c(1:1000))) , times=100)
microbenchmark::microbenchmark(simplify2array(list(c(1:1000),c(1:1000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=10)
simplify2array(list(c(1:1000),c(1:1000)))
simplify2array(list(c(1:1000),c(1:1000)))
microbenchmark::microbenchmark(simplify2array(list(c(1:1000),c(1:1000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=10)
rep(5,c(1:10))
rep(c(1:10))
rep(c(1:10),5)
microbenchmark::microbenchmark(simplify2array(list(c(1:10000))), base::simplify2array(list(c(1:10000))) , times=100)
microbenchmark::microbenchmark(simplify2array(list(c(1:1000),c(1:1000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=100)
microbenchmark::microbenchmark(simplify2array(list(c(1:100000))), base::simplify2array(list(c(1:100000))) , times=100)
microbenchmark::microbenchmark(simplify2array(list(c(1:100000),c(1:100000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=10)
<<echo=TRUE,print=FALSE>>=
microbenchmark::microbenchmark(simplify2array(list(c(1:100000),c(1:100000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=100)
@
microbenchmark::microbenchmark(simplify2array(list(c(1:10000),c(1:10000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=100)
microbenchmark::microbenchmark(simplify2array(list(c(1:100000),c(1:100000))), base::simplify2array(list(c(1:1000),c(1:1000))) , times=100)
microbenchmark::microbenchmark(simplify2array(list(c(1:10000))), base::simplify2array(list(c(1:10000))) , times=100)
table(c(1,1,1,2,3,4))
max(table(c(1,1,1,2,3,4)))
which(max(table(c(1,1,1,2,3,4))))
max(table(c(1,1,1,2,3,4)))
max(table(c(1,1,1,2,3,4)))
which.max(table(c(1,1,1,2,3,4)))
names(which.max(table(c(1,1,1,2,3,4))))
names(which.max(table(c(1,1,1,2,2,2,2,3,4))))
which.max(table(c(1,1,1,2,2,2,2,3,4)))
aaa <- which.max(table(c(1,1,1,2,2,2,2,3,4)))
aaa
aaa==2
aaa==1
mode2 <- function(x) {
which.max(table(x))
}
mode2(c(1,1,1,1))
mode2(c(NA,NA))
mode2(c(NA,1))
mode2(c(NA,1,2))
mode2(c(NA,1,2,2))
microbenchmark::microbenchmark(
mode(c(1:100000),5),
mode2(c(1:100000),5),
times=100
)
microbenchmark::microbenchmark(
mode(c(1:100000)),
mode2(c(1:100000)),
times=100
)
microbenchmark::microbenchmark(
mode(c(1:10000)),
mode2(c(1:10000)),
times=100
)
microbenchmark::microbenchmark(
mode(c(1:10)),
mode2(c(1:10)),
times=100
)
microbenchmark::microbenchmark(
mode(c(1:100000)),
mode2(c(1:100000)),
times=10
)
library(andzinskihw6)
n <- sapply(c(1:10), function(x) { nrow(ass(x)) })
library(andzinskihw6)
ass(2)
